import { app, BrowserWindow, ipcMain } from 'electron';
import collectData from './collect-data'

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const UI_WEBPACK_ENTRY: string;
declare const UI_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) { // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: UI_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
      // this is not recommended and bad, but I also can't figure out how to get it to work without it
      // that said, it should be fine so long as we don't load remote content
      contextIsolation: false
    }
  });

  // and load the index.html of the app.
  mainWindow.loadURL(UI_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

// listing to events
ipcMain.on('request-data-update', (event) => {
  loadAndSendData()
  event.returnValue = 'ACK'
})

async function loadAndSendData(window?: any) {
  const data = await collectData()
  if (window) {
    window.webContents.send('data-updated', data)
  } else {
    BrowserWindow.getAllWindows().forEach(window => {
      window.webContents.send('data-updated', data)
    })
  }
}